{"version":3,"sources":["components/Icon/Icon.jsx","components/Buttons/IconButton/IconButton.jsx","components/Card/Card.jsx","components/Input/Input.jsx","components/Buttons/ButtonPrimary/ButtonPrimary.jsx","components/FormModal/FormModal.jsx","components/AddCardForm/AddCardForm.jsx","components/Header/Header.jsx","components/Buttons/RoundButton/RoundButton.jsx","components/Orderer/Orderer.jsx","helpers/helpers.js","components/EditCardForm/EditCardForm.jsx","components/Dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Icon","className","iconName","iconSize","style","fontSize","IconButton","onClick","icon","size","Card","title","description","image","iconPrimary","iconPrimaryAction","iconSecondary","iconSecondaryAction","urlImage","backgroundImage","InputText","name","placeholder","onChange","helpermessage","value","type","ButtonPrimary","children","FormModal","closeButtonClick","onSubmit","submitButtonLabel","formTitle","formFields","map","field","i","Input","AddCardForm","useState","form","setForm","error","setError","imageRegexp","handleChange","e","preventDefault","target","match","getErrorUrl","trim","getErrorByEmpty","id","uuid","date","Date","Header","RoundButton","Orderer","orderOptions","selectedOption","selectVisibility","setSelectVisibility","option","action","compareTitleAsc","a","b","titleA","toUpperCase","titleB","compareTitleDes","compareDateAsc","dateA","dateB","compareDateDes","EditCardForm","submitChanges","card","Dashboard","actualCards","JSON","parse","localStorage","getItem","addCardFormVisibility","setAddCardFormVisibility","editCard","setEditCard","cards","setCards","orderBy","setOrderBy","useEffect","setItem","stringify","setOrderCards","order","cardsObj","sort","closeModal","length","newCardsArray","filter","removeCard","viewEditCard","content","Object","keys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc60b267.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Icon = ({ className, iconName, iconSize }) => {\r\n    return <div className={`${className || ''} ${iconName} `} style={{ fontSize: iconSize }}></div>;\r\n};\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport Icon from '../../Icon/Icon';\r\n\r\nconst IconButton = ({ className, onClick, icon, size }) => {\r\n    return (\r\n        <button\r\n            className={`iconbutton ${className || ''}`}\r\n            onClick={onClick ? () => onClick() : () => {}}\r\n        >\r\n            <Icon iconName={icon} iconSize={size} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default IconButton;\r\n","import React from 'react';\r\nimport IconButton from '../Buttons/IconButton/IconButton';\r\n\r\nconst Card = ({\r\n    title,\r\n    description,\r\n    image,\r\n    iconPrimary,\r\n    iconPrimaryAction,\r\n    iconSecondary,\r\n    iconSecondaryAction,\r\n}) => {\r\n    const urlImage =\r\n        image === ''\r\n            ? 'https://andaluciaorienta.net/wp-content/themes/easymag-pro/images/no-image.png'\r\n            : image;\r\n\r\n    return (\r\n        <div className='card'>\r\n            <IconButton\r\n                className='card__close'\r\n                icon={iconPrimary}\r\n                size='2rem'\r\n                onClick={\r\n                    iconPrimaryAction\r\n                        ? () => {\r\n                              iconPrimaryAction();\r\n                          }\r\n                        : () => {}\r\n                }\r\n            />\r\n            <IconButton\r\n                className='card__edit'\r\n                icon={iconSecondary}\r\n                onClick={\r\n                    iconSecondaryAction\r\n                        ? () => {\r\n                              iconSecondaryAction();\r\n                          }\r\n                        : () => {}\r\n                }\r\n                size='2rem'\r\n            />\r\n            <div className='card__image' style={{ backgroundImage: `url(${urlImage})` }}></div>\r\n            <h1 className='card__title'>{title}</h1>\r\n            <div className='card__description'>\r\n                <p className='card__description--text'>{description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nexport const InputText = ({ name, placeholder, onChange, helpermessage, value }) => {\r\n    return (\r\n        <div className='input-text'>\r\n            <input\r\n                className='input-text__box'\r\n                type='text'\r\n                name={name}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                value={value}\r\n            />\r\n            {helpermessage ? <p className='input-text__helpermessage'>{helpermessage}</p> : ''}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\n\r\nconst ButtonPrimary = ({ type, children, onClick }) => {\r\n    return (\r\n        <button\r\n            className='buttonprimary'\r\n            type={type}\r\n            onClick={\r\n                onClick\r\n                    ? () => {\r\n                          onClick();\r\n                      }\r\n                    : () => {}\r\n            }\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ButtonPrimary;\r\n","import React from 'react';\r\nimport InputText from '../Input/Input';\r\nimport ButtonPrimary from '../Buttons/ButtonPrimary/ButtonPrimary';\r\nimport IconButton from '../Buttons/IconButton/IconButton';\r\n\r\nconst FormModal = ({ closeButtonClick, onSubmit, submitButtonLabel, formTitle, formFields }) => {\r\n    return (\r\n        <div className='modal'>\r\n            <div className='form-container'>\r\n                <IconButton\r\n                    onClick={() => closeButtonClick()}\r\n                    icon='sga-icon-times'\r\n                    size='2.5rem'\r\n                />\r\n                <h1 className='form-title'>{formTitle}</h1>\r\n                <form className='form' onSubmit={onSubmit}>\r\n                    {formFields.map((field, i) => {\r\n                        return (\r\n                            <InputText\r\n                                key={i}\r\n                                name={field.name}\r\n                                placeholder={field.placeholder}\r\n                                onChange={field.onChange}\r\n                                helpermessage={field.helpermessage || ''}\r\n                                value={field.value}\r\n                            />\r\n                        );\r\n                    })}\r\n                    <ButtonPrimary type='submit'>{submitButtonLabel}</ButtonPrimary>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormModal;\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport FormModal from '../FormModal/FormModal';\r\n\r\nconst AddCardForm = ({ closeButtonClick, onSubmit }) => {\r\n    const [form, setForm] = useState({\r\n        title: '',\r\n        description: '',\r\n        image: '',\r\n    });\r\n    const [error, setError] = useState({\r\n        title: false,\r\n        description: false,\r\n        image: false,\r\n    });\r\n\r\n    const imageRegexp = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi;\r\n\r\n    //función que comprueba si el campo está vacío, y de ser así, setea el error\r\n    const getErrorByEmpty = (value, name) => {\r\n        if (value === '' || value.trim() === '') {\r\n            setError({\r\n                ...error,\r\n                [name]: true,\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                [name]: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    //función que comprueba la validez de la url de la imagen, y de no ser válida, setea error\r\n    const getErrorUrl = (value, name) => {\r\n        if (!value.match(imageRegexp)) {\r\n            setError({\r\n                ...error,\r\n                [name]: true,\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                [name]: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        setForm({\r\n            ...form,\r\n            [name]: value,\r\n        });\r\n\r\n        //comprobamos si el campo es de image, y si no está vacío\r\n        if (name === 'image' && value !== '') {\r\n            getErrorUrl(value, name);\r\n        }\r\n        //comprobamos que el campo no sea image (porque si image )\r\n        else if (name !== 'image') {\r\n            getErrorByEmpty(value, name);\r\n        }\r\n        //última opción, si es campo imagen, y está vacío, seteamos error a false\r\n        else {\r\n            setError({\r\n                ...error,\r\n                image: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    const submitCard = (e) => {\r\n        e.preventDefault();\r\n\r\n        //nos tremos el state actual\r\n        const { title, description, image } = form;\r\n\r\n        //Comprobación del form\r\n        if (title.trim() !== '' && description.trim() !== '') {\r\n            form.id = uuid();\r\n            form.date = Date();\r\n            onSubmit(form);\r\n            setForm({\r\n                title: '',\r\n                description: '',\r\n                image: '',\r\n            });\r\n            closeButtonClick();\r\n        } else {\r\n            // comprobación de cada posibilidad de estado del formulario\r\n            if (title.trim() === '' && description.trim() === '') {\r\n                setError({\r\n                    ...error,\r\n                    title: true,\r\n                    description: true,\r\n                });\r\n            } else if (title.trim() === '') {\r\n                setError({\r\n                    ...error,\r\n                    title: true,\r\n                    image: true,\r\n                });\r\n            } else {\r\n                setError({\r\n                    ...error,\r\n                    description: true,\r\n                    image: true,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormModal\r\n            closeButtonClick={closeButtonClick}\r\n            formTitle='Agrega tu tarjeta'\r\n            submitButtonLabel='Añadir tarjeta'\r\n            onSubmit={submitCard}\r\n            formFields={[\r\n                {\r\n                    name: 'title',\r\n                    placeholder: 'Título',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.title ? 'El título no puede estar vacío' : '',\r\n                },\r\n                {\r\n                    name: 'description',\r\n                    placeholder: 'Descripción',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.description ? 'La descripción no puede estar vacía' : '',\r\n                },\r\n                {\r\n                    name: 'image',\r\n                    placeholder: 'Imagen (Url)',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.image ? 'La url de la imagen no es correcta' : '',\r\n                },\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AddCardForm;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='header'>\r\n            <h1 className='header-title'>Card-Manager</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst RoundButton = ({ onClick }) => {\r\n    return (\r\n        <button\r\n            className='roundbutton'\r\n            onClick={() => {\r\n                onClick();\r\n            }}\r\n        >\r\n            +\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default RoundButton;\r\n","import React, { useState } from 'react';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Orderer = ({ orderOptions, selectedOption }) => {\r\n    const [selectVisibility, setSelectVisibility] = useState(false);\r\n\r\n    return (\r\n        <div className='orderer'>\r\n            <div\r\n                className={`orderer__selected ${selectVisibility ? 'focus' : ''}`}\r\n                onClick={() => setSelectVisibility(!selectVisibility)}\r\n            >\r\n                {selectedOption}\r\n                <Icon\r\n                    className={`${selectVisibility ? 'opened' : ''}`}\r\n                    iconName='sga-icon-caret-filled-down'\r\n                />\r\n            </div>\r\n            <div className={`orderer__options-container ${selectVisibility ? 'visible' : ''}`}>\r\n                {orderOptions.map((option, id) => {\r\n                    return (\r\n                        <div\r\n                            key={id}\r\n                            className='orderer__option'\r\n                            onClick={() => {\r\n                                option.action(option.name);\r\n                                setSelectVisibility(!selectVisibility);\r\n                            }}\r\n                        >\r\n                            {option.name}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orderer;\r\n","export const compareTitleAsc = (a, b) => {\r\n    const titleA = a.title.toUpperCase();\r\n    const titleB = b.title.toUpperCase();\r\n\r\n    let comparison = 0;\r\n\r\n    if (titleA > titleB) {\r\n        return (comparison = 1);\r\n    } else if (titleA < titleB) {\r\n        return (comparison = -1);\r\n    }\r\n};\r\n\r\nexport const compareTitleDes = (a, b) => {\r\n    const titleA = a.title.toUpperCase();\r\n    const titleB = b.title.toUpperCase();\r\n\r\n    let comparison = 0;\r\n\r\n    if (titleA > titleB) {\r\n        return (comparison = -1);\r\n    } else if (titleA < titleB) {\r\n        return (comparison = 1);\r\n    }\r\n};\r\n\r\nexport const compareDateAsc = (a, b) => {\r\n    const dateA = a.date;\r\n    const dateB = b.date;\r\n\r\n    if (dateA > dateB) {\r\n        return 1;\r\n    } else if (dateA < dateB) {\r\n        return -1;\r\n    }\r\n};\r\n\r\nexport const compareDateDes = (a, b) => {\r\n    const dateA = a.date;\r\n    const dateB = b.date;\r\n\r\n    if (dateA > dateB) {\r\n        return -1;\r\n    } else if (dateA < dateB) {\r\n        return 1;\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport FormModal from '../FormModal/FormModal';\r\n\r\nconst EditCardForm = ({ closeButtonClick, submitChanges, card }) => {\r\n    const [form, setForm] = useState(card);\r\n    const [error, setError] = useState({\r\n        title: false,\r\n        description: false,\r\n        image: false,\r\n    });\r\n\r\n    const imageRegexp = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi;\r\n\r\n    //función que comprueba si el campo está vacío, y de ser así, setea el error\r\n    const getErrorByEmpty = (value, name) => {\r\n        if (value === '' || value.trim() === '') {\r\n            setError({\r\n                ...error,\r\n                [name]: true,\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                [name]: false,\r\n            });\r\n        }\r\n    };\r\n    //función que comprueba la validez de la url de la imagen, y de no ser válida, setea error\r\n    const getErrorUrl = (value, name) => {\r\n        if (!value.match(imageRegexp)) {\r\n            setError({\r\n                ...error,\r\n                [name]: true,\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                [name]: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        setForm({\r\n            ...form,\r\n            [name]: value,\r\n        });\r\n\r\n        //comprobamos si el campo es de image, y si no está vacío\r\n        if (name === 'image' && value !== '') {\r\n            getErrorUrl(value, name);\r\n        }\r\n        //comprobamos que el campo no sea image (porque si image )\r\n        else if (name !== 'image') {\r\n            getErrorByEmpty(value, name);\r\n        }\r\n        //última opción, si es campo imagen, y está vacío, seteamos error a false\r\n        else {\r\n            setError({\r\n                ...error,\r\n                image: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    const submitCard = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { title, description } = form;\r\n\r\n        if (title.trim() !== '' && description.trim() !== '') {\r\n            submitChanges(form);\r\n            closeButtonClick();\r\n        } else if (title.trim() === '') {\r\n            setError({\r\n                ...error,\r\n                title: true,\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                description: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormModal\r\n            closeButtonClick={closeButtonClick}\r\n            formTitle='Modifica tu tarjeta'\r\n            submitButtonLabel='Guardar'\r\n            onSubmit={submitCard}\r\n            formFields={[\r\n                {\r\n                    name: 'title',\r\n                    placeholder: 'Título',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.title ? 'El título no puede estar vacío' : '',\r\n                    value: form.title,\r\n                },\r\n                {\r\n                    name: 'description',\r\n                    placeholder: 'Descripción',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.description ? 'La descripción no puede estar vacía' : '',\r\n                    value: form.description,\r\n                },\r\n                {\r\n                    name: 'image',\r\n                    placeholder: 'Imagen (Url)',\r\n                    onChange: handleChange,\r\n                    helpermessage: error.image ? 'La url de la imagen no es correcta' : '',\r\n                    value: form.image,\r\n                },\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditCardForm;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport AddCardForm from '../AddCardForm/AddCardForm';\r\nimport Header from '../Header/Header';\r\nimport RoundButton from '../Buttons/RoundButton/RoundButton';\r\nimport Orderer from '../Orderer/Orderer';\r\nimport {\r\n    compareTitleAsc,\r\n    compareTitleDes,\r\n    compareDateAsc,\r\n    compareDateDes,\r\n} from '../../helpers/helpers';\r\nimport EditCardForm from '../EditCardForm/EditCardForm';\r\n\r\nconst Dashboard = () => {\r\n    const actualCards = JSON.parse(localStorage.getItem('savecards') || []);\r\n\r\n    const [addCardFormVisibility, setAddCardFormVisibility] = useState(false);\r\n    const [editCard, setEditCard] = useState({});\r\n    const [cards, setCards] = useState(actualCards);\r\n    const [orderBy, setOrderBy] = useState('Ordenar por');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('savecards', JSON.stringify(cards));\r\n    }, [cards]);\r\n\r\n    const viewAddCard = () => {\r\n        setAddCardFormVisibility(true);\r\n    };\r\n\r\n    const addCard = (content) => {\r\n        setCards([...cards, content]);\r\n    };\r\n\r\n    const removeCard = (id) => {\r\n        const newCardsArray = cards.filter((card) => card.id !== id);\r\n\r\n        setCards(newCardsArray);\r\n    };\r\n\r\n    const saveCard = (content) => {\r\n        const { id, title, description, image } = content;\r\n\r\n        setCards(\r\n            cards.map((card) => {\r\n                return card.id === id\r\n                    ? {\r\n                          ...card,\r\n                          title,\r\n                          description,\r\n                          image,\r\n                      }\r\n                    : card;\r\n            }),\r\n        );\r\n    };\r\n\r\n    const viewEditCard = (card) => {\r\n        setEditCard(card);\r\n    };\r\n\r\n    const setOrderCards = (order) => {\r\n        setOrderBy(order);\r\n\r\n        const cardsObj = cards;\r\n\r\n        switch (order) {\r\n            case 'Nombre asc':\r\n                cardsObj.sort(compareTitleAsc);\r\n                return cardsObj;\r\n            case 'Nombre desc':\r\n                cardsObj.sort(compareTitleDes);\r\n                return cardsObj;\r\n            case 'Fecha asc':\r\n                cardsObj.sort(compareDateAsc);\r\n                return cardsObj;\r\n            case 'Fecha desc':\r\n                cardsObj.sort(compareDateDes);\r\n                return cardsObj;\r\n            default:\r\n        }\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setAddCardFormVisibility(false);\r\n        setEditCard({});\r\n    };\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n            <Header />\r\n            <div className='main'>\r\n                {cards.length === 0 ? (\r\n                    <div className='main__nocards'>\r\n                        <p className='message'>Ahora mismo no dispones de ninguna card</p>\r\n                    </div>\r\n                ) : (\r\n                    <Fragment>\r\n                        <div className='main__orderer-container'>\r\n                            <Orderer\r\n                                selectedOption={orderBy}\r\n                                orderOptions={[\r\n                                    { name: 'Nombre asc', action: setOrderCards },\r\n                                    { name: 'Nombre desc', action: setOrderCards },\r\n                                    { name: 'Fecha asc', action: setOrderCards },\r\n                                    { name: 'Fecha desc', action: setOrderCards },\r\n                                ]}\r\n                            />\r\n                        </div>\r\n                        <div className='main__container-cards'>\r\n                            {cards.map((card, id) => (\r\n                                <Card\r\n                                    key={id}\r\n                                    title={card.title}\r\n                                    description={card.description}\r\n                                    image={card.image}\r\n                                    iconPrimary='sga-icon-times'\r\n                                    iconPrimaryAction={() => {\r\n                                        removeCard(card.id);\r\n                                    }}\r\n                                    iconSecondary='sga-icon-pencil-alt'\r\n                                    iconSecondaryAction={() => {\r\n                                        viewEditCard(card);\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </Fragment>\r\n                )}\r\n            </div>\r\n            <RoundButton onClick={viewAddCard} />\r\n            {addCardFormVisibility ? (\r\n                <AddCardForm closeButtonClick={closeModal} onSubmit={addCard} />\r\n            ) : (\r\n                ''\r\n            )}\r\n            {Object.keys(editCard).length > 0 ? (\r\n                <EditCardForm\r\n                    closeButtonClick={closeModal}\r\n                    submitChanges={saveCard}\r\n                    card={editCard}\r\n                />\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import Dashboard from './components/Dashboard/Dashboard';\r\nimport './styles/main.scss';\r\n\r\nfunction App() {\r\n    return <Dashboard />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}